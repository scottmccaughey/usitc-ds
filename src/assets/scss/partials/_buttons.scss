// 888               888    888
// 888               888    888
// 888               888    888
// 88888b.  888  888 888888 888888 .d88b.  88888b.  .d8888b
// 888 "88b 888  888 888    888   d88""88b 888 "88b 88K
// 888  888 888  888 888    888   888  888 888  888 "Y8888b.
// 888 d88P Y88b 888 Y88b.  Y88b. Y88..88P 888  888      X88
// 88888P"   "Y88888  "Y888  "Y888 "Y88P"  888  888  88888P'

// Buttons
//
// This is our base button. It can be generated using either a `<button type="button">` element, an `<input type="button">` element or a `<a class="button" role="button">` element.
//
// Common practice on the web suggests that:
//
// * `<button>` elements should be used to trigger a page action, such as hiding/displaying content.
// * `<input>` elements should be used to trigger `<form>` actions.
// * `<a>` elements should be used to trigger a move to a new page or view.
//
// For accessibility, **always specify a `type`** when using a `<button>` element and **always add `role="button"`** when using a `<a>` element as a button.
//
// Markup:
// <button type="button">Button Button</button>
// <input type="button" value="Input Button">
// <a class="button" role="button">Link Button</a>
//
// Styleguide Components.Buttons
button,
[type="button"],
.button {
  align-items: center;
  background-color: $color-theme-base-background;
  background-image: none;
  border: 1px solid $color-theme-base-border;
  border-radius: $border-radius-base;
  color: $color-theme-base-text;
  display: inline-flex;
  font-weight: $font-weight-normal;
  height: auto;
  justify-content: center;
  line-height: $line-height-button;
  padding: $space-s;
  position: relative;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  transition: $transition-base;

  &:active,
  &:focus,
  &:hover {
    background-color: $color-theme-base-hover-background;
    color: $color-theme-base-hover-text;
  }

  + button,
  + [type="button"],
  + .button {
    margin-left: $space-s;
  }

  // Disabled Button
  //
  // Disable `<button>` and `<input>` elements with the boolean `disabled` attribute and `<a>` elements with the `.disabled` class.
  //
  // Markup:
  // <button type="button" disabled>Disabled Button</button>
  // <input type="button" value="Disabled Button" disabled>
  // <a class="button disabled" role="button">Disabled Button</a>
  //
  // Styleguide Components.Buttons.Disabled
  //
  // Weight: 1
  &[disabled],
  &.disabled {
    background-color: inherit;
    color: inherit;
    cursor: not-allowed;
    opacity: 0.5;

    &:active,
    &:focus,
    &:hover {
      background-color: inherit;
      color: inherit;
    }
  }

  // Button Sizes
  //
  // Styleguide Components.Buttons.Sizes
  //
  // Weight: 2

  // Small Button
  //
  // Add a `.button-s` class for a smaller button.
  //
  // Markup:
  // <button type="button">Button</button>
  // <button type="button" class="button-s">Small Button</button>
  //
  // Styleguide Components.Buttons.Sizes.Small
  //
  // Weight: 1
  &.button-s {
    font-size: $font-size-xs;
  }

  // Large Button
  //
  // Add a `.button-l` class for a larger button.
  //
  // Markup:
  // <button type="button">Button</button>
  // <button type="button" class="button-l">Large Button</button>
  //
  // Styleguide Components.Buttons.Sizes.Large
  //
  // Weight: 2
  &.button-l {
    font-size: $font-size-l;
  }

  // Extra Large Button
  //
  // Add a `.button-xl` class for a smaller button.
  //
  // Markup:
  // <button type="button">Button</button>
  // <button type="button" class="button-xl">Extra Large Button</button>
  //
  // Styleguide Components.Buttons.Sizes.ExtraLarge
  //
  // Weight: 3
  &.button-xl {
    font-size: $font-size-xl;
  }

  &.button-borderless {
    border-color: transparent;
  }

  &.button-centered {
    display: block;
    margin: 1rem auto;
  }

  &.button-cancel {
    background-color: $color-red;
    border-color: transparent;
    color: $color-white;

    &:active,
    &:focus,
    &:hover {
      background-color: $color-red-dark;
    }
  }

  &.button-close {
    background-color: transparent;
    border: 0;
    color: $color-theme-dark-text;
    font-size: $font-size-xl;
    padding: $space-xs;
    position: absolute;
    right: 0;
    top: 0;
  }

  // Extra Large Button
  //
  // Add a `.button-xl` class for a smaller button.
  //
  // Markup:
  // <button type="button">Button</button>
  // <button type="button" class="button-xl">Extra Large Button</button>
  //
  // Styleguide Components.Buttons.Sizes.ExtraLarge
  //
  // Weight: 3
  &.button-full-width {
    width: 100%;
  }

  &.button-ghost {
    background-color: transparent;
    color: inherit;

    &:active,
    &:focus,
    &:hover {
      background-color: $color-blue;
      color: $color-white;
    }
  }

  &.button-icon {
    position: relative;
  }

  &.button-invisible {
    background-color: transparent;
    border-width: 0;
    color: inherit;
    padding: 0;

    &:active,
    &:focus,
    &:hover {
      background-color: $color-theme-dark-hover-background;
      color: $color-theme-dark-text;
    }
  }

  &.button-new-request {
    align-items: stretch;
    display: flex;
    flex-direction: row;
    font-size: $font-size-m;
    margin: 1rem auto;
    max-width: 100%;
    padding: 0;

    @include breakpoint(m) {
      font-size: $font-size-xxxl;
    }

    &:active,
    &:focus,
    &:hover {
      > div {
        background-color: $color-blue;

        &.button-icon {
          background-color: $color-white;
        }
      }
    }

    > div {
      background-color: $color-green;
      color: $color-white;
      padding: $space-m;

      @include breakpoint(m) {
        padding: $space-m $space-l;
      }

      &.button-icon {
        background-color: $color-white;
        color: $color-gray;
        display: flex;
        flex-direction: column;
        padding: $space-s;
        width: $space-l;

        @include breakpoint(m) {
          padding: $space-m;
          width: $space-xl;
        }

        > * {
          display: flex;
          flex: 1;
          flex-direction: column;
          height: $space-m;
          width: $space-m;

          @include breakpoint(m) {
            width: $space-l;
          }
        }
      }
    }

    svg {
      display: block;
      flex: 1;
      height: $space-m;
      width: $space-m;

      @include breakpoint(m) {
        height: $space-l;
        width: $space-l;
      }
    }
  }

  &.button-primary {
    border-color: transparent;
    background-color: $color-theme-dark-background-alt;
    color: $color-theme-dark-text;

    &:active,
    &:focus,
    &:hover {
      background-color: $color-theme-dark-background;
      color: $color-theme-dark-text;

      .on-dark & {
        border-color: $color-white;
      }
    }
  }

  &.button-primary-alt {
    background-color: $color-theme-dark-background;

    &:active,
    &:focus,
    &:hover {
      background-color: $color-theme-dark-background-alt;
      color: $color-theme-dark-text;
    }
  }

  &.button-round {
    border-radius: $border-radius-circle;
    height: $space-l;
    line-height: $space-l;
    width: $space-l;
  }

  &.button-search-submit {
    height: $space-l;
    width: 10rem;
  }

  &.button-spinner {
    &.button-xl {
      min-height: 62px;
    }

    .spinner {
      margin: 0;
    }
  }

  &.button-success {
    background-color: $color-green;
    border-color: transparent;
    color: $color-white;

    &:active,
    &:focus,
    &:hover {
      background-color: $color-green-dark;
    }
  }

  &.button-transparent {
    border-color: transparent;
    background-color: transparent;
    color: inherit;
  }
}

.buttons-right {
  align-items: center;
  display: flex;
  flex-direction: row;

  > * {
    flex-basis: 100%;
  }

  > button,
  > .tag {
    flex: 0 1 auto;
    margin-left: $space-s;
    white-space: nowrap;
  }
}
